[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"

[project]
name = "simple-rag"
version = "0.1.0"
description = "Sistema RAG simples usando LangChain e Ollama"
readme = "README.md"
requires-python = ">=3.13"
authors = [
    { name = "Flavio", email = "flavio@example.com" }
]
dependencies = [
    "typing-extensions",
    "pydantic>=2.0.0",
    "pydantic-settings>=2.0.0",
    "langchain",
    "langchain-huggingface",
    "langchain-core",
    "langchain-community",
    "langchain-text-splitters",
    "langgraph",
    "langchain-ollama",
    "pypdf",
    "sentence-transformers",
    "python-dotenv",
    "requests",
]

[project.scripts]
simple-rag = "simple_rag.cli:main"

[project.optional-dependencies]
dev = [
    "ipython",
    "black",
    "mypy",
    "pydocstyle",
    "ruff",
    "types-requests",
    "tomli"
]

[tool.poetry]
packages = [{ include = "simple_rag" }]

[tool.black]
line-length = 88
target-version = ['py313']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | _build
  | buck-out
  | build
  | dist
)/
'''

[tool.ruff]
# Mesma linha do black
line-length = 88
target-version = "py313"

# Diretórios a ignorar
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".git-rewrite",
    ".hg",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "venv",
]

[tool.ruff.lint]
# Regras a ativar
select = [
    "E", # pycodestyle errors
    "W", # pycodestyle warnings
    "F", # pyflakes
    "I", # isort
    "B", # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
    "ARG", # flake8-unused-arguments
    "SIM", # flake8-simplify
    "TCH", # flake8-type-checking
    "PTH", # flake8-use-pathlib
    "ERA", # eradicate
    "PL", # pylint
    "RUF", # ruff-specific rules
]

# Regras a ignorar
ignore = [
    "E501", # line too long (deixar para o black)
    "B008", # do not perform function calls in argument defaults
    "C901", # too complex
    "PLR0913", # too many arguments
    "PLR0912", # too many branches
    "PLR0915", # too many statements
    "PLR2004", # magic value used in comparison
]

# Permitir autofix para todas as regras habilitadas que suportam
fixable = ["ALL"]
unfixable = []

[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["F401"]  # imported but unused
"tests/*" = ["ARG", "PLR2004"]  # unused arguments e magic values são OK em testes

[tool.ruff.lint.isort]
known-first-party = ["simple_rag"]

[tool.ruff.lint.mccabe]
max-complexity = 10

[tool.mypy]
python_version = "3.13"
warn_return_any = false
warn_unused_configs = true
disallow_untyped_defs = false
disallow_incomplete_defs = false
check_untyped_defs = true
disallow_untyped_decorators = false
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
show_error_codes = true
show_column_numbers = true
pretty = true

# Importações
ignore_missing_imports = true
follow_imports = "normal"

# Diretórios a ignorar
exclude = [
    "^build/",
    "^dist/",
    "^\\.venv/",
    "^\\.eggs/",
]

[[tool.mypy.overrides]]
module = [
    "langchain.*",
    "langchain_core.*",
    "langchain_community.*",
    "langchain_huggingface.*",
    "langchain_ollama.*",
    "langgraph.*",
    "sentence_transformers.*",
]
ignore_missing_imports = true

[tool.pydocstyle]
convention = "google"
add_ignore = [
    "D100", # Missing docstring in public module
    "D104", # Missing docstring in public package
    "D107", # Missing docstring in __init__
]
match = "(?!test_).*\\.py"
match_dir = "^(?!(\\.tox|\\.venv|build|dist)).*"

[tool.pytest.ini_options]
minversion = "6.0"
addopts = "-ra -q --strict-markers"
testpaths = [
    "tests",
]
pythonpath = [
    "."
]

[tool.coverage.run]
source = ["simple_rag"]
omit = [
    "*/tests/*",
    "*/__init__.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
    "@abstractmethod",
]
[dependency-groups]
dev = [
    "pre-commit (>=4.3.0,<5.0.0)"
]
